/**
 * Modified Knit Framework Templates
 * 
 * Generates Get/Set/Others component structure for Roblox services
 */

export interface KnitComponent {
  name: string
  type: 'get' | 'set' | 'other'
  description?: string
}

export interface KnitServiceConfig {
  serviceName: string
  components: {
    get: KnitComponent[]
    set: KnitComponent[]
    others: KnitComponent[]
  }
}

/**
 * Generate service init.lua template
 */
export function generateServiceInit(config: KnitServiceConfig): string {
  const { serviceName, components } = config
  
  return `-- ${serviceName} Service
-- Auto-generated by SuperBulletAI

local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)

local ${serviceName} = Knit.CreateService({
    Name = "${serviceName}",
    Client = {
        -- Client-exposed signals
    },
})

-- Load Get components
${components.get.map(c => `local ${c.name} = require(script.Get["${c.name}"])`).join('\n')}

-- Load Set components
${components.set.map(c => `local ${c.name} = require(script.Set["${c.name}"])`).join('\n')}

-- Load Other components
${components.others.map(c => `local ${c.name} = require(script.Others["${c.name}"])`).join('\n')}

function ${serviceName}:KnitStart()
    print("${serviceName} started")
end

function ${serviceName}:KnitInit()
    print("${serviceName} initialized")
end

return ${serviceName}
`
}

/**
 * Generate Get component template (read operations)
 */
export function generateGetComponent(name: string, description?: string): string {
  return `-- ${name} Component
-- Type: Get (Read operation)
${description ? `-- Description: ${description}` : ''}
-- Auto-generated by SuperBulletAI

local ${name} = {}

--[[
    Example Get function
    Used for reading data without side effects
]]
function ${name}.GetData(playerId)
    -- TODO: Implement your get logic here
    return nil
end

return ${name}
`
}

/**
 * Generate Set component template (write operations)
 */
export function generateSetComponent(name: string, description?: string): string {
  return `-- ${name} Component
-- Type: Set (Write operation)
${description ? `-- Description: ${description}` : ''}
-- Auto-generated by SuperBulletAI

local ${name} = {}

--[[
    Example Set function
    Used for modifying data or state
]]
function ${name}.SetData(playerId, value)
    -- TODO: Implement your set logic here
    return true
end

return ${name}
`
}

/**
 * Generate Other component template (specialized operations)
 */
export function generateOtherComponent(name: string, description?: string): string {
  return `-- ${name} Component
-- Type: Other (Specialized operation)
${description ? `-- Description: ${description}` : ''}
-- Auto-generated by SuperBulletAI

local ${name} = {}

--[[
    Specialized component function
    Used for specific business logic
]]
function ${name}.Execute()
    -- TODO: Implement your logic here
end

return ${name}
`
}

/**
 * Generate complete Knit service structure
 */
export function generateKnitService(config: KnitServiceConfig) {
  const files: Array<{ path: string; content: string; fileType: string }> = []
  
  // Main init file
  files.push({
    path: `ServerScriptService/${config.serviceName}/init.lua`,
    content: generateServiceInit(config),
    fileType: 'lua'
  })
  
  // Get components
  config.components.get.forEach(component => {
    files.push({
      path: `ServerScriptService/${config.serviceName}/Get/${component.name}.lua`,
      content: generateGetComponent(component.name, component.description),
      fileType: 'lua'
    })
  })
  
  // Set components
  config.components.set.forEach(component => {
    files.push({
      path: `ServerScriptService/${config.serviceName}/Set/${component.name}.lua`,
      content: generateSetComponent(component.name, component.description),
      fileType: 'lua'
    })
  })
  
  // Other components
  config.components.others.forEach(component => {
    files.push({
      path: `ServerScriptService/${config.serviceName}/Others/${component.name}.lua`,
      content: generateOtherComponent(component.name, component.description),
      fileType: 'lua'
    })
  })
  
  return files
}
